// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "OTEL Orchestration Support",
            "email": "support@otel-orchestration.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/cep": {
            "post": {
                "description": "Validates CEP input and forwards to orchestration service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gateway"
                ],
                "summary": "Process CEP input",
                "parameters": [
                    {
                        "description": "CEP input",
                        "name": "cep",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gateway.CEPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response from orchestration service",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Invalid zipcode",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Verifica se a aplicação está funcionando",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/weather/{cep}": {
            "get": {
                "description": "Recebe um CEP brasileiro válido (já validado pelo Gateway) e retorna a temperatura atual em Celsius, Fahrenheit e Kelvin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Obter temperatura por CEP",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"01310100\"",
                        "description": "CEP brasileiro (8 dígitos, já validado)",
                        "name": "cep",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Informações de temperatura",
                        "schema": {
                            "$ref": "#/definitions/domain.WeatherResponse"
                        }
                    },
                    "404": {
                        "description": "CEP não encontrado",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Erro interno do servidor",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.ErrorResponse": {
            "description": "Resposta de erro da API",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "invalid zipcode"
                }
            }
        },
        "domain.WeatherResponse": {
            "description": "Resposta contendo a temperatura em Celsius, Fahrenheit e Kelvin",
            "type": "object",
            "properties": {
                "city": {
                    "type": "string",
                    "example": "São Paulo"
                },
                "temp_C": {
                    "type": "number",
                    "example": 28.5
                },
                "temp_F": {
                    "type": "number",
                    "example": 83.3
                },
                "temp_K": {
                    "type": "number",
                    "example": 301.5
                }
            }
        },
        "gateway.CEPRequest": {
            "type": "object",
            "properties": {
                "cep": {
                    "type": "string"
                }
            }
        },
        "gateway.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "description": "Operações relacionadas ao clima",
            "name": "weather"
        },
        {
            "description": "Health check da aplicação",
            "name": "health"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8081",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "OTEL Orchestration Service",
	Description:      "Serviço de orquestração para consulta de temperatura por CEP brasileiro\nRecebe um CEP válido e retorna a temperatura atual em Celsius, Fahrenheit e Kelvin.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
